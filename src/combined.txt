--- C:\Users\PC\IdeaProjects\cookle\src\unite.cmd --- 
@echo off
setlocal

set OUTPUT_FILE=combined.txt

if exist %OUTPUT_FILE% del %OUTPUT_FILE%

for /R %%f in (*.*) do (
    echo --- %%~f --- >> %OUTPUT_FILE%
    type "%%f" >> %OUTPUT_FILE%
    echo. >> %OUTPUT_FILE%
)

echo READY: %OUTPUT_FILE%
endlocal
pause
 
--- C:\Users\PC\IdeaProjects\cookle\src\main\java\harelins\co\il\cookle\CookleApplication.java --- 
package harelins.co.il.cookle;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class CookleApplication {

    public static void main(String[] args) {
        SpringApplication.run(CookleApplication.class, args);
    }

}
 
--- C:\Users\PC\IdeaProjects\cookle\src\main\java\harelins\co\il\cookle\config\WebConfig.java --- 
package harelins.co.il.cookle.config;

import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.config.annotation.ViewControllerRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

@Configuration
public class WebConfig implements WebMvcConfigurer {
    @Override
    public void addViewControllers(ViewControllerRegistry registry) {
        registry.addViewController("/project").setViewName("forward:/index.mustache");
    }
}
 
--- C:\Users\PC\IdeaProjects\cookle\src\main\java\harelins\co\il\cookle\controller\RecipeController.java --- 
package harelins.co.il.cookle.controller;

import harelins.co.il.cookle.dto.RecipeDto;
import harelins.co.il.cookle.model.Recipe;
import harelins.co.il.cookle.service.RecipeMapper;
import harelins.co.il.cookle.service.RecipeService;
import jakarta.persistence.Cacheable;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/recipes")
@RequiredArgsConstructor
public class RecipeController {
    private final RecipeService recipeService;
    private final RecipeMapper recipeMapper;

    @GetMapping("/search")
    public ResponseEntity<List<RecipeDto>> searchRecipes(@RequestParam String query) {
        List<Recipe> recipes = recipeService.searchRecipes(query);
        List<RecipeDto> results = recipes.stream().map(recipeMapper::toDto).toList();
        return ResponseEntity.ok(results);
    }

    @GetMapping("/{id}")
    public ResponseEntity<RecipeDto> getRecipeDetails(@PathVariable Long id) {
        Recipe recipe = recipeService.getRecipeDetails(id);
        return ResponseEntity.ok(recipeMapper.toDto(recipe));
    }
}
 
--- C:\Users\PC\IdeaProjects\cookle\src\main\java\harelins\co\il\cookle\dto\IngredientDto.java --- 
package harelins.co.il.cookle.dto;

import lombok.Data;

@Data
public class IngredientDto {
    private Long id;
    private String name;
    private Double amount;
}
 
--- C:\Users\PC\IdeaProjects\cookle\src\main\java\harelins\co\il\cookle\dto\InstructionDto.java --- 
package harelins.co.il.cookle.dto;

import lombok.AllArgsConstructor;
import lombok.Data;

@Data
@AllArgsConstructor
public class InstructionDto {
    private Long id;
    private String description;
    private Integer step;
}
 
--- C:\Users\PC\IdeaProjects\cookle\src\main\java\harelins\co\il\cookle\dto\RecipeDto.java --- 
package harelins.co.il.cookle.dto;

import lombok.Data;

import java.util.List;

@Data
public class RecipeDto {
    private Long id;
    private String name;
    private Integer yield;
    private List<IngredientDto> ingredients;
    private List<InstructionDto> instructions;
}
 
--- C:\Users\PC\IdeaProjects\cookle\src\main\java\harelins\co\il\cookle\exception\ResourceNotFoundException.java --- 
package harelins.co.il.cookle.exception;

public class ResourceNotFoundException extends RuntimeException {
    public ResourceNotFoundException(String message) {
        super(message);
    }
}
 
--- C:\Users\PC\IdeaProjects\cookle\src\main\java\harelins\co\il\cookle\init\DataInitializer.java --- 
package harelins.co.il.cookle.init;

import harelins.co.il.cookle.model.Ingredient;
import harelins.co.il.cookle.model.Instruction;
import harelins.co.il.cookle.model.Recipe;
import harelins.co.il.cookle.model.RecipeIngredient;
import harelins.co.il.cookle.repository.IngredientRepository;
import harelins.co.il.cookle.repository.InstructionRepository;
import harelins.co.il.cookle.repository.RecipeIngredientRepository;
import harelins.co.il.cookle.repository.RecipeRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.boot.CommandLineRunner;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import java.util.Set;

@Component
@RequiredArgsConstructor
public class DataInitializer implements CommandLineRunner {

    private final RecipeRepository recipeRepository;
    private final IngredientRepository ingredientRepository;
    private final InstructionRepository instructionRepository;
    private final RecipeIngredientRepository recipeIngredientRepository;

    @Override
    @Transactional
    public void run(String... args) throws Exception {
        // Clear existing data
        recipeRepository.deleteAll();
        recipeIngredientRepository.deleteAll();
        ingredientRepository.deleteAll();
        instructionRepository.deleteAll();

        // Recipe 1: Spaghetti Carbonara
        Recipe carbonara = new Recipe();
        carbonara.setName("Spaghetti Carbonara");
        carbonara.setYield(2);

        Ingredient spaghetti = createIngredient("Spaghetti", 200);
        Ingredient pancetta = createIngredient("Pancetta", 150);
        Ingredient egg = createIngredient("Egg", 2);
        Ingredient parmesan = createIngredient("Parmesan", 50);
        Ingredient blackPepper = createIngredient("Black Pepper", 5);

        carbonara.setIngredients(Set.of(
                createRecipeIngredient(carbonara, spaghetti),
                createRecipeIngredient(carbonara, pancetta),
                createRecipeIngredient(carbonara, egg),
                createRecipeIngredient(carbonara, parmesan),
                createRecipeIngredient(carbonara, blackPepper)
        ));

        carbonara.setInstructions(Set.of(
                createInstruction(carbonara, 1, "Cook spaghetti in boiling salted water until al dente."),
                createInstruction(carbonara, 2, "Fry pancetta until crispy."),
                createInstruction(carbonara, 3, "Whisk eggs with grated parmesan and black pepper."),
                createInstruction(carbonara, 4, "Combine spaghetti with pancetta, then add egg mixture, stirring quickly.")
        ));
        recipeRepository.save(carbonara);

        // Recipe 2: Classic Omelette
        Recipe omelette = new Recipe();
        omelette.setName("Classic Omelette");
        omelette.setYield(1);

        Ingredient eggs = createIngredient("Eggs", 3);
        Ingredient milk = createIngredient("Milk", 30);
        Ingredient butter = createIngredient("Butter", 10);
        Ingredient salt = createIngredient("Salt", 2);

        omelette.setIngredients(Set.of(
                createRecipeIngredient(omelette, eggs),
                createRecipeIngredient(omelette, milk),
                createRecipeIngredient(omelette, butter),
                createRecipeIngredient(omelette, salt)
        ));

        omelette.setInstructions(Set.of(
                createInstruction(omelette, 1, "Whisk eggs with milk and salt."),
                createInstruction(omelette, 2, "Heat butter in a frying pan."),
                createInstruction(omelette, 3, "Pour in the egg mixture."),
                createInstruction(omelette, 4, "Cook for 3-5 minutes until set.")
        ));
        recipeRepository.save(omelette);

        // Recipe 3: Caesar Salad
        Recipe caesar = new Recipe();
        caesar.setName("Caesar Salad");
        caesar.setYield(2);

        Ingredient chickenBreast = createIngredient("Chicken Breast", 200);
        Ingredient romaine = createIngredient("Romaine Lettuce", 100);
        Ingredient croutons = createIngredient("Croutons", 50);
        Ingredient caesarDressing = createIngredient("Caesar Dressing", 30);
        Ingredient parmesanCheese = createIngredient("Parmesan Cheese", 40);

        caesar.setIngredients(Set.of(
                createRecipeIngredient(caesar, chickenBreast),
                createRecipeIngredient(caesar, romaine),
                createRecipeIngredient(caesar, croutons),
                createRecipeIngredient(caesar, caesarDressing),
                createRecipeIngredient(caesar, parmesanCheese)
        ));

        caesar.setInstructions(Set.of(
                createInstruction(caesar, 1, "Grill chicken breast until cooked through and slice."),
                createInstruction(caesar, 2, "Tear romaine lettuce into bite-sized pieces."),
                createInstruction(caesar, 3, "Combine lettuce, chicken, and croutons."),
                createInstruction(caesar, 4, "Toss with dressing and sprinkle with parmesan.")
        ));
        recipeRepository.save(caesar);

        // Recipe 4: Margherita Pizza
        Recipe pizza = new Recipe();
        pizza.setName("Margherita Pizza");
        pizza.setYield(4);

        Ingredient pizzaDough = createIngredient("Pizza Dough", 300);
        Ingredient tomatoSauce = createIngredient("Tomato Sauce", 100);
        Ingredient freshMozzarella = createIngredient("Fresh Mozzarella", 200);
        Ingredient freshBasil = createIngredient("Fresh Basil", 10);
        Ingredient oliveOil = createIngredient("Olive Oil", 20);

        pizza.setIngredients(Set.of(
                createRecipeIngredient(pizza, pizzaDough),
                createRecipeIngredient(pizza, tomatoSauce),
                createRecipeIngredient(pizza, freshMozzarella),
                createRecipeIngredient(pizza, freshBasil),
                createRecipeIngredient(pizza, oliveOil)
        ));

        pizza.setInstructions(Set.of(
                createInstruction(pizza, 1, "Preheat oven to 475°F (245°C)."),
                createInstruction(pizza, 2, "Roll out the dough and spread tomato sauce."),
                createInstruction(pizza, 3, "Add sliced mozzarella and bake for 10-12 minutes."),
                createInstruction(pizza, 4, "Garnish with fresh basil and drizzle with olive oil.")
        ));
        recipeRepository.save(pizza);

        // Recipe 5: Chocolate Mousse
        Recipe mousse = new Recipe();
        mousse.setName("Chocolate Mousse");
        mousse.setYield(4);

        Ingredient darkChocolate = createIngredient("Dark Chocolate", 200);
        Ingredient heavyCream = createIngredient("Heavy Cream", 200);
        Ingredient sugar = createIngredient("Sugar", 50);
        Ingredient eggWhites = createIngredient("Egg Whites", 3);

        mousse.setIngredients(Set.of(
                createRecipeIngredient(mousse, darkChocolate),
                createRecipeIngredient(mousse, heavyCream),
                createRecipeIngredient(mousse, sugar),
                createRecipeIngredient(mousse, eggWhites)
        ));

        mousse.setInstructions(Set.of(
                createInstruction(mousse, 1, "Melt chocolate over a double boiler."),
                createInstruction(mousse, 2, "Whip cream with half the sugar to soft peaks."),
                createInstruction(mousse, 3, "Beat egg whites with remaining sugar to stiff peaks."),
                createInstruction(mousse, 4, "Gently fold chocolate into cream, then fold in egg whites."),
                createInstruction(mousse, 5, "Chill for at least 2 hours before serving.")
        ));
        recipeRepository.save(mousse);

        // Recipe 6: Beef Burger
        Recipe burger = new Recipe();
        burger.setName("Classic Beef Burger");
        burger.setYield(2);

        Ingredient groundBeef = createIngredient("Ground Beef", 300);
        Ingredient burgerBuns = createIngredient("Burger Buns", 2);
        Ingredient lettuce = createIngredient("Lettuce", 30);
        Ingredient tomato = createIngredient("Tomato", 1);
        Ingredient onion = createIngredient("Onion", 0.5);
        Ingredient cheese = createIngredient("Cheddar Cheese", 60);

        burger.setIngredients(Set.of(
                createRecipeIngredient(burger, groundBeef),
                createRecipeIngredient(burger, burgerBuns),
                createRecipeIngredient(burger, lettuce),
                createRecipeIngredient(burger, tomato),
                createRecipeIngredient(burger, onion),
                createRecipeIngredient(burger, cheese)
        ));

        burger.setInstructions(Set.of(
                createInstruction(burger, 1, "Form ground beef into patties and season."),
                createInstruction(burger, 2, "Grill or fry patties for 4-5 minutes per side."),
                createInstruction(burger, 3, "Toast burger buns lightly."),
                createInstruction(burger, 4, "Assemble with lettuce, tomato, onion, and cheese.")
        ));
        recipeRepository.save(burger);

        // Recipe 7: Chicken Curry
        Recipe curry = new Recipe();
        curry.setName("Chicken Curry");
        curry.setYield(4);

        Ingredient chickenThighs = createIngredient("Chicken Thighs", 500);
        Ingredient curryPaste = createIngredient("Curry Paste", 50);
        Ingredient coconutMilk = createIngredient("Coconut Milk", 400);
        Ingredient onionCurry = createIngredient("Onion", 1);
        Ingredient garlic = createIngredient("Garlic", 3);
        Ingredient ginger = createIngredient("Ginger", 20);

        curry.setIngredients(Set.of(
                createRecipeIngredient(curry, chickenThighs),
                createRecipeIngredient(curry, curryPaste),
                createRecipeIngredient(curry, coconutMilk),
                createRecipeIngredient(curry, onionCurry),
                createRecipeIngredient(curry, garlic),
                createRecipeIngredient(curry, ginger)
        ));

        curry.setInstructions(Set.of(
                createInstruction(curry, 1, "Sauté chopped onion, garlic, and ginger."),
                createInstruction(curry, 2, "Add curry paste and cook for 1 minute."),
                createInstruction(curry, 3, "Add chicken and brown lightly."),
                createInstruction(curry, 4, "Pour in coconut milk and simmer for 20 minutes.")
        ));
        recipeRepository.save(curry);

        // Recipe 8: Apple Pie
        Recipe applePie = new Recipe();
        applePie.setName("Apple Pie");
        applePie.setYield(8);

        Ingredient pieCrust = createIngredient("Pie Crust", 2);
        Ingredient apples = createIngredient("Apples", 6);
        Ingredient cinnamon = createIngredient("Cinnamon", 10);
        Ingredient brownSugar = createIngredient("Brown Sugar", 100);
        Ingredient butterPie = createIngredient("Butter", 50);

        applePie.setIngredients(Set.of(
                createRecipeIngredient(applePie, pieCrust),
                createRecipeIngredient(applePie, apples),
                createRecipeIngredient(applePie, cinnamon),
                createRecipeIngredient(applePie, brownSugar),
                createRecipeIngredient(applePie, butterPie)
        ));

        applePie.setInstructions(Set.of(
                createInstruction(applePie, 1, "Preheat oven to 375°F (190°C)."),
                createInstruction(applePie, 2, "Mix sliced apples with cinnamon and sugar."),
                createInstruction(applePie, 3, "Line pie dish with crust, add filling, and dot with butter."),
                createInstruction(applePie, 4, "Cover with top crust and bake for 45 minutes.")
        ));
        recipeRepository.save(applePie);

        // Recipe 9: Greek Salad
        Recipe greekSalad = new Recipe();
        greekSalad.setName("Greek Salad");
        greekSalad.setYield(2);

        Ingredient cucumber = createIngredient("Cucumber", 1);
        Ingredient tomatoGreek = createIngredient("Tomato", 2);
        Ingredient redOnion = createIngredient("Red Onion", 0.5);
        Ingredient feta = createIngredient("Feta Cheese", 100);
        Ingredient olives = createIngredient("Kalamata Olives", 50);

        greekSalad.setIngredients(Set.of(
                createRecipeIngredient(greekSalad, cucumber),
                createRecipeIngredient(greekSalad, tomatoGreek),
                createRecipeIngredient(greekSalad, redOnion),
                createRecipeIngredient(greekSalad, feta),
                createRecipeIngredient(greekSalad, olives)
        ));

        greekSalad.setInstructions(Set.of(
                createInstruction(greekSalad, 1, "Chop cucumber, tomatoes, and red onion."),
                createInstruction(greekSalad, 2, "Combine vegetables in a bowl with olives."),
                createInstruction(greekSalad, 3, "Top with cubed feta cheese."),
                createInstruction(greekSalad, 4, "Drizzle with olive oil and oregano.")
        ));
        recipeRepository.save(greekSalad);

        // Recipe 10: Pancakes
        Recipe pancakes = new Recipe();
        pancakes.setName("Fluffy Pancakes");
        pancakes.setYield(8);

        Ingredient flour = createIngredient("Flour", 200);
        Ingredient milkPancakes = createIngredient("Milk", 300);
        Ingredient eggPancakes = createIngredient("Egg", 1);
        Ingredient bakingPowder = createIngredient("Baking Powder", 15);
        Ingredient sugarPancakes = createIngredient("Sugar", 30);

        pancakes.setIngredients(Set.of(
                createRecipeIngredient(pancakes, flour),
                createRecipeIngredient(pancakes, milkPancakes),
                createRecipeIngredient(pancakes, eggPancakes),
                createRecipeIngredient(pancakes, bakingPowder),
                createRecipeIngredient(pancakes, sugarPancakes)
        ));

        pancakes.setInstructions(Set.of(
                createInstruction(pancakes, 1, "Mix dry ingredients in one bowl."),
                createInstruction(pancakes, 2, "Whisk wet ingredients in another bowl."),
                createInstruction(pancakes, 3, "Combine mixtures without overmixing."),
                createInstruction(pancakes, 4, "Cook on a griddle until bubbles form, then flip.")
        ));
        recipeRepository.save(pancakes);
    }

    private Ingredient createIngredient(String name, Number amount) {
        Ingredient ingredient = new Ingredient();
        ingredient.setName(name);
        ingredient.setAmount(amount instanceof Integer ? (Integer) amount : amount.doubleValue());
        return ingredientRepository.save(ingredient);
    }

    private RecipeIngredient createRecipeIngredient(Recipe recipe, Ingredient ingredient) {
        RecipeIngredient ri = new RecipeIngredient();
        ri.setRecipe(recipe);
        ri.setIngredient(ingredient);
        return recipeIngredientRepository.save(ri);
    }

    private Instruction createInstruction(Recipe recipe, int step, String description) {
        Instruction instruction = new Instruction();
        instruction.setRecipe(recipe);
        instruction.setStep(step);
        instruction.setDescription(description);
        return instructionRepository.save(instruction);
    }
} 
--- C:\Users\PC\IdeaProjects\cookle\src\main\java\harelins\co\il\cookle\model\Ingredient.java --- 
package harelins.co.il.cookle.model;

import jakarta.persistence.*;
import lombok.*;

import java.util.HashSet;
import java.util.Set;

@Entity
@Table(name = "INGREDIENTS")
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
@ToString(exclude = "recipes")
@EqualsAndHashCode(exclude ="recipes")
public class Ingredient {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String name;
    private Double amount;

    @OneToMany(mappedBy = "ingredient")
    private Set<RecipeIngredient> recipes = new HashSet<>();
} 
--- C:\Users\PC\IdeaProjects\cookle\src\main\java\harelins\co\il\cookle\model\Instruction.java --- 
package harelins.co.il.cookle.model;

import jakarta.persistence.*;
import lombok.*;

@Entity
@Table(name = "RECIPES_INSTRUCTIONS")
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
@ToString(exclude = "recipe")
@EqualsAndHashCode(exclude = "recipe")
public class Instruction {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @ManyToOne
    private Recipe recipe;

    private Integer step;

    private String description;
} 
--- C:\Users\PC\IdeaProjects\cookle\src\main\java\harelins\co\il\cookle\model\Recipe.java --- 
package harelins.co.il.cookle.model;

import jakarta.persistence.*;
import lombok.*;

import java.util.HashSet;
import java.util.Set;

@Entity
@Table(name = "RECIPES")
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
@ToString(exclude = {"ingredients", "instructions"})
@EqualsAndHashCode(exclude = {"ingredients", "instructions"})
public class Recipe {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String name;
    private Integer yield;

    @OneToMany(mappedBy = "recipe", cascade = CascadeType.ALL)
    private Set<RecipeIngredient> ingredients = new HashSet<>();

    @OneToMany(mappedBy = "recipe", cascade = CascadeType.ALL)
    private Set<Instruction> instructions = new HashSet<>();
}
 
--- C:\Users\PC\IdeaProjects\cookle\src\main\java\harelins\co\il\cookle\model\RecipeIngredient.java --- 
package harelins.co.il.cookle.model;


import jakarta.persistence.*;
import lombok.*;

@Entity
@Table(name = "RECIPES_INGREDIENTS")
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
@ToString(exclude = {"recipe", "ingredient"})
@EqualsAndHashCode(exclude = {"recipe", "ingredient"})
public class RecipeIngredient {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @ManyToOne
    private Recipe recipe;

    @ManyToOne
    private Ingredient ingredient;
} 
--- C:\Users\PC\IdeaProjects\cookle\src\main\java\harelins\co\il\cookle\repository\IngredientRepository.java --- 
package harelins.co.il.cookle.repository;

import harelins.co.il.cookle.model.Ingredient;
import org.springframework.data.jpa.repository.JpaRepository;

public interface IngredientRepository extends JpaRepository<Ingredient, Long> {
}
 
--- C:\Users\PC\IdeaProjects\cookle\src\main\java\harelins\co\il\cookle\repository\InstructionRepository.java --- 
package harelins.co.il.cookle.repository;

import harelins.co.il.cookle.model.Instruction;
import org.springframework.data.jpa.repository.JpaRepository;

public interface InstructionRepository extends JpaRepository<Instruction, Long> {
}
 
--- C:\Users\PC\IdeaProjects\cookle\src\main\java\harelins\co\il\cookle\repository\RecipeIngredientRepository.java --- 
package harelins.co.il.cookle.repository;

import harelins.co.il.cookle.model.RecipeIngredient;
import org.springframework.data.jpa.repository.JpaRepository;

public interface RecipeIngredientRepository extends JpaRepository<RecipeIngredient, Long> {
} 
--- C:\Users\PC\IdeaProjects\cookle\src\main\java\harelins\co\il\cookle\repository\RecipeRepository.java --- 
package harelins.co.il.cookle.repository;

import harelins.co.il.cookle.model.Recipe;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.List;

public interface RecipeRepository extends JpaRepository<Recipe, Long> {
    List<Recipe> findByNameContainingIgnoreCase(String namePart);
}
 
--- C:\Users\PC\IdeaProjects\cookle\src\main\java\harelins\co\il\cookle\service\RecipeMapper.java --- 
package harelins.co.il.cookle.service;

import harelins.co.il.cookle.dto.IngredientDto;
import harelins.co.il.cookle.dto.InstructionDto;
import harelins.co.il.cookle.dto.RecipeDto;
import harelins.co.il.cookle.model.Recipe;
import org.springframework.stereotype.Component;

@Component
public class RecipeMapper {
    public RecipeDto toDto(Recipe recipe) {
        RecipeDto dto = new RecipeDto();
        dto.setId(recipe.getId());
        dto.setName(recipe.getName());
        dto.setYield(recipe.getYield());

        dto.setIngredients(recipe.getIngredients().stream()
                .map(ri -> {
                    IngredientDto ingDto = new IngredientDto();
                    ingDto.setId(ri.getIngredient().getId());
                    ingDto.setName(ri.getIngredient().getName());
                    ingDto.setAmount(ri.getIngredient().getAmount());
                    return ingDto;
                })
                .toList());

        dto.setInstructions(recipe.getInstructions().stream()
                .map(i -> new InstructionDto(i.getId(), i.getDescription(), i.getStep()))
                .toList());

        return dto;
    }
}
 
--- C:\Users\PC\IdeaProjects\cookle\src\main\java\harelins\co\il\cookle\service\RecipeService.java --- 
package harelins.co.il.cookle.service;

import harelins.co.il.cookle.exception.ResourceNotFoundException;
import harelins.co.il.cookle.model.Recipe;
import harelins.co.il.cookle.repository.RecipeRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
@RequiredArgsConstructor
public class RecipeService {
    private final RecipeRepository recipeRepository;

    public List<Recipe> searchRecipes(String namePart) {
        return recipeRepository.findByNameContainingIgnoreCase(namePart);
    }

    public Recipe getRecipeDetails(Long id) {
        return recipeRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("Recipe not found"));
    }
}
 
--- C:\Users\PC\IdeaProjects\cookle\src\main\resources\application.properties --- 
spring.application.name=cookle

# Server
server.port=8080
server.servlet.context-path=/project

# Database (H2 for development)
spring.datasource.url=jdbc:h2:mem:cookle
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=

# H2 Console
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console

# JPA
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.format_sql=true 
--- C:\Users\PC\IdeaProjects\cookle\src\main\resources\templates\index.mustache --- 
<!DOCTYPE html>
<html>
<head>
    <title>Cookle Recipe Search</title>
</head>
<body>
<h1>Cookle Recipe Search</h1>

<form id="searchForm">
    <input type="text" id="searchQuery" placeholder="Enter recipe name...">
    <button type="submit">Search</button>
</form>

<div id="results"></div>

<script>
    document.getElementById('searchForm').addEventListener('submit', function (e) {
        e.preventDefault();
        const query = document.getElementById('searchQuery').value;

        fetch(`/project/api/recipes/search?query=${encodeURIComponent(query)}`)
            .then(response => response.json())
            .then(recipes => {
                const resultsDiv = document.getElementById('results');
                resultsDiv.innerHTML = '';

                if (recipes.length === 0) {
                    resultsDiv.innerHTML = '<p>No recipes found</p>';
                    return;
                }

                recipes.forEach(recipe => {
                    const recipeDiv = document.createElement('div');
                    recipeDiv.innerHTML = `
                        <h3>${recipe.name}</h3>
                        <p>Yield: ${recipe.yield} servings</p>
                        <h4>Ingredients:</h4>
                        <ul>
                            ${recipe.ingredients.map(i =>
                            `<li>${i.name}: ${i.amount}</li>`
                    ).join('')}
                        </ul>
                        <h4>Instructions:</h4>
                        <ol>
                            ${recipe.instructions
                            .sort((a, b) => a.step - b.step)
                            .map(i =>
                                    `<li>${i.description}</li>`
                            ).join('')}
                        </ol>
                        <hr>
                    `;
                    resultsDiv.appendChild(recipeDiv);
                });
            });
    });
</script>
</body>
</html> 
--- C:\Users\PC\IdeaProjects\cookle\src\test\java\harelins\co\il\cookle\CookleApplicationTests.java --- 
package harelins.co.il.cookle;

import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
class CookleApplicationTests {

    @Test
    void contextLoads() {
    }

}
 
